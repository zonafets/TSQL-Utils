/*  leave this
    l:%licence%
    g:script,utility
    v:121018\s.zaglio: a bug near @opt
    v:120528\s.zaglio: renamed #objs in #alias_objs to avoid conflict
    v:120523\s.zaglio: a non correct err msg when target is a synonym
    v:120521\s.zaglio: a bug near dynamic sql
    v:120516\s.zaglio: adapted to new fn__script_sysobjs
    v:120504.1446\s.zaglio: added uses of synonyms
    v:111205\s.zaglio: added show of source when error occur in compilation
    v:110415\s.zaglio: added more table exclusions
    v:110213\s.zaglio: added more help for debug
    v:101113\s.zaglio: added support of excludes with %
    v:100724\s.zaglio: a bug around bits
    v:100722\s.zaglio: test destination to overrides/create correctly;+@excludes
    v:100721\s.zaglio: excluded sp_info,help
    v:100720\s.zaglio: generate a caller of objects of other db
    t:sp_config 'web%'
*/
CREATE proc [dbo].[sp__script_alias]
    @db sysname     = null,
    @like sysname   = null,
    @excludes nvarchar(4000) = null,
    @opt sysname    = null,
    @dbg int        = 0
as
begin
set nocount on
-- if @dbg>=@@nestlevel exec sp__printf 'write here the error msg'
declare @proc sysname,  @ret int -- standard API: 0=OK -1=HELP, any=error id
select @proc=object_name(@@procid), @ret=0,
       @opt=dbo.fn__str_quote(isnull(@opt,''),'|')

if @like is null select @like='%'

if @db is null goto help

if @db=db_name() goto err_nodb

-- drop table #alias_objs
create table #alias_objs(
    id int identity,obj sysname,xtype sysname,
    flds nvarchar(4000),types nvarchar(4000),
    nulls nvarchar(4000) null, outs nvarchar(4000) null
    )

create table #excludes (obj sysname)
insert #excludes select 'sp_info'
insert #excludes select 'sp_find'
insert #excludes select 'help'
insert #excludes select 'hashbytes'
insert #excludes select cod from fn__script_sysobjs((select obj from tids))
insert #excludes select token from dbo.fn__str_params(@excludes,',',default)
-- expand wild tokens
insert #excludes
    select o.name
    from #excludes e
    join sysobjects o on o.name like e.obj
    where e.obj like '%[%]%'
delete from #excludes where obj like '%[%]%'

declare
    @sql nvarchar(4000),
    @h1 sysname,@h2 sysname,@h3 sysname,@h4 sysname

-- select * from fn__script_sysobjs((select obj from tids))

select
    @h1='/*  leave this',
    @h2='    g:sp__script_alias',
    @h3='    v:'+convert(sysname,getdate(),12)+'\generated by '+@proc,
    @h4='*/',

    @sql='
    insert #alias_objs (obj,xtype,flds,types)
    select
        o.name, o.xtype,
        '+quotename(@db)+'.dbo.fn__flds_of(o.name,'','',null) flds,
        '+quotename(@db)+'.dbo.fn__flds_type_of(o.name,''|'',null) types
    from '+quotename(@db)+'..sysobjects o
    -- excludes extension/support system object tables
    left join fn__script_sysobjs((select obj from tids)) so
    on right(o.name,len(so.cod)+1)=''_''+so.cod
    where xtype in (''tf'',''if'',''fn'',''p'')
    and name like '''+@like+'''
    and not name like ''%[_][_]%''  -- not the utilities
    and not name like ''dt[_]%''    -- not the mssql dt tables
    and not name like ''tbl[_]%''   -- not the utility tables
    and not name like ''bak[_]%''   -- not the backup tables
    and not name like ''%bak''      -- not the backup tables
    and not name like ''tmp%''      -- not the temp table
    and not name like ''[_]%''      -- not the temp table
    and not name like ''0%''        -- not the temp table
    and not name in(select obj from #excludes)   -- special local sp related to sp__info
    order by xtype,name

    -- select * from #alias_objs
    -- select * from #excludes

    declare
        @i int,@n int,@name sysname,@xt nvarchar(4),
        @nulls nvarchar(4000),@outs nvarchar(4000)
    select @i=min(id),@n=max(id) from #alias_objs
    while (@i<=@n)
        begin
        select @name='''+quotename(@db)+'..''+obj,@xt=xtype
        from #alias_objs where id=@i
        if @xt=''P''
            begin
            select @nulls=null,@outs=null
            select @nulls=isnull(@nulls+'','','''')+convert(nchar(1),isnullable)
            from '+quotename(@db)+'..syscolumns where id=object_id(@name) order by number,colorder
            select @outs =isnull(@outs+'','','''')+convert(nchar(1),isoutparam)
            from '+quotename(@db)+'..syscolumns where id=object_id(@name) order by number,colorder
            update #alias_objs set nulls=@nulls, outs=@outs where id=@i
            end
        select @i=@i+1
        end -- while
'
if @dbg=1 exec sp__printf '%s',@sql
exec sp_executesql @sql
if @dbg=1 exec sp__select_astext 'select * from #alias_objs order by id'
create table #src(lno int identity,line nvarchar(4000))

-- select * from #alias_objs order by xtype
declare
    @i int,@n int,@m int,@xt sysname,@name sysname,
    @flds nvarchar(4000),@types nvarchar(4000),
    @nulls nvarchar(4000),@outs nvarchar(4000),
    @mssql2k bit,
    @done bit

select @mssql2k=dbo.fn__ismssql2k()

if charindex('|nosyn|',@opt)>0
    select @mssql2k=1
else
    select @mssql2k=0

select @i=min(id),@n=max(id) from #alias_objs
while (@i<=@n)
    begin
    select @done=0
    exec sp_executesql N'
    select
        @xt=xtype,@name=obj,
        @flds=flds,
        @types=types,
        @nulls=nulls,
        @outs=outs
    from #alias_objs where id=@i
    ',N'
    @i int,@xt sysname out,@name sysname out,
    @flds nvarchar(4000) out,@types nvarchar(4000) out,
    @nulls nvarchar(4000) out,@outs nvarchar(4000) out',
    @i=@i,@xt=@xt out,@name=@name out,@flds=@flds out,@types=@types out,
    @nulls=@nulls out,@outs=@outs out

    select @m=dbo.fn__str_count(@flds,',')
    truncate table #src

    if @mssql2k=1 and @xt='FN'
        begin
        insert #src select @h1
        insert #src select @h2
        insert #src select @h3
        insert #src select @h4
        insert #src select 'create function '+quotename(@name)+
                           case when @flds is null then '' else '(' end

        insert #src(line)
        select '    '+p.token+' '+t.token+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p
        join dbo.fn__str_params(@types,'|',default) t on p.pos=t.pos
        where p.pos>1

        insert #src select case when @flds is null then '' else ')' end
        insert #src select 'returns '+dbo.fn__str_at(@types,'|',1)
        insert #src select 'as'
        insert #src select 'begin'
        insert #src select 'return '+quotename(@db)+'.dbo.'+quotename(@name)+
                           case when @flds is null then '' else '(' end

        insert #src(line)
        select '    '+p.token+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p
        where p.pos>1

        insert #src select case when @flds is null then '' else ')' end
        insert #src select 'end'

        select @done=1
        end -- fn

    if @mssql2k=1 and @xt in ('IF','TF')
        begin
        insert #src select @h1
        insert #src select @h2
        insert #src select @h3
        insert #src select @h4
        insert #src select 'create function '+quotename(@name)+
                           case when @flds is null then '' else '(' end

        insert #src(line)
        select '    '+p.token+' '+t.token+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p
        join dbo.fn__str_params(@types,'|',default) t on p.pos=t.pos
        where p.pos>1 and p.token like '@%'

        insert #src select case when @flds is null then '' else ')' end
        insert #src select 'returns table '
        insert #src select 'as'
        insert #src select 'return'
        insert #src select 'select * '
        insert #src select 'from '+quotename(@db)+'.dbo.'+quotename(@name)+
                           case when @flds is null then '' else '(' end

        insert #src
        select '    '+p.token+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p
        where p.pos>1 and p.token like '@%'

        insert #src select case when @flds is null then '' else ')' end

        select @done=1
        end -- tf

    if @mssql2k=1 and @xt='P'
        begin

        insert #src select @h1
        insert #src select @h2
        insert #src select @h3
        insert #src select @h4
        insert #src select 'create proc '+quotename(@name)

        insert #src(line)
        select '    '+p.token+' '+t.token+
               case when dbo.fn__str_at(@nulls,',',p.pos)='1' then '=null' else '' end+
               case when dbo.fn__str_at(@outs, ',',p.pos)='1' then ' out'  else '' end+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p
        join dbo.fn__str_params(@types,'|',default) t on p.pos=t.pos

        insert #src select 'as'
        insert #src select 'exec '+quotename(@db)+'.dbo.'+quotename(@name)

        insert #src(line)
        select '    '+p.token+
               case when dbo.fn__str_at(@outs, ',',p.pos)='1' then ' out'  else '' end+
               case when p.pos<@m then ',' else '' end as line
        from dbo.fn__str_params(@flds,',',default) p

        select @done=1
        end -- sp

    if @mssql2k=0
        begin
        truncate table #src
        insert #src(line)
        select 'create synonym '+quotename(@name)+
               ' for '+quotename(@db)+'.dbo.'+quotename(@name)
        select @done=1
        end

    if @done=1
        begin
        if @dbg=1 exec sp__print_table '#src'
        else
            begin
            declare @lxt nvarchar(2)            -- local obj type
            select @lxt=xtype from sysobjects where id=object_id(@name)

            -- test to ovverrides correctly
            if object_id(@name) is null
            or exists(select null from dbo.fn__script_info(@name,'g',default)
                     where obj_id=object_id(@name) and val1='sp__script_alias')
            or 'SN'=@lxt            -- synonyms are overwritten
                begin
                exec sp__drop @name
                if @dbg=2
                    exec @ret=sp__script_compile @dbg=1
                else
                    exec @ret=sp__script_compile
                if @ret!=0 exec sp__print_table '#src'
                end
            else
                exec @ret=sp__err 'local object "%s" is different',@proc,@p1=@name
            end -- overrite/create
        end -- if done
    else -- not @done
        goto err_notp

    select @i=@i+1
    end -- while

drop table #src
drop table #alias_objs
goto ret

err_nodb:   exec @ret=sp__err 'cannot create self link',@proc goto ret
err_notp:   exec @ret=sp__err 'not managed type "%s" for "%s"',@proc,@p1=@xt,@p2=@name

help:
exec sp__usage @proc,'
Scope
    generate a local call to a sp/fn of a twin/origin/master database in mssql2k
    in mssql2k5 create a shynonym

Parameters
    @db         origin db
    @like       name of object to redirect (can use %; null means all sp and fn
    @excludes   name of obj to exclude, separated by comma (can use %)
    @opt        options     description
                nosyn       do not use synonym but classic mssql2k forward view/fn/sp

Notes
    If the sp/fn has a parameter @db_name, the sp/fn will be called padding to
    the original, del value of local "db_name()"

Example
    sp__script_alias ''master_db'',''my_sps%''

'
select @ret=-1
ret:
return @ret
end -- sp__script_alias